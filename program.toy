; Define the factorial function using our language constructs.
; (def factorial 
;  (fn (n)
;    (if (= n 0)
;        1
;        (* n (factorial (- n 1))))))

; Call the factorial function with 5 and print the result.
; (print (factorial 5))



1
"krishna loves cheeks"
; "krishna"
(+ 1 2 3)
(- 100 1)
(* 2 4)


(+ 1 (* 2 4) 10)


; Simple arithmetic
(+ 1 2 3 4 5)

; Variable definition and usage
(define x 5)
(+ x 5)

; Lambda function
(lambda (x, x) (x * x))

; Function definition (lambda) and Application
(define square
    (lambda (x)
        (* x x)
    )
)
(square 9)


((lambda (x)
    (begin
      (display x)
      (* x x)
    )
 )
6)

;;;;;;;; START OF BEGIN CODE ;;;;;;;;;;;;
(begin
  (display "Hello, World!")
  (+ 2 3 4))

(begin
  (define x 10)
  (display x)
  (* x 3))

(define square_and_print
  (lambda (x)
    (begin
      (display x)
      (* x x))))
(square_and_print 5)
;;;;;;;; END OF BEGIN CODE ;;;;;;;;;;;;

; Conditional expression
(define x 3)
(if (> x 5)
    "Greater than five"
    "Not greater than five"
)

(define romi_loves_cheeks #t)
(define cheeks_loves_romi #f)

(if romi_loves_cheeks "dont lie" "I knew it already")
(if cheeks_loves_romi "Really?" "Unbelievable")

(= 1 1) ; should return True
(= 1 2) ; should return False

; Sequential execution using `begin`
(begin
    (define a 5)
    (define b 7)
    (+ a b)
)

; Logical operator (and, or, not)
(not 0)
(not 1)
(not #t)
(not #f)
(not "")
(not "krishna")


; Recursion: factorial function
;(define fact
;    (lambda (n)
;        (if (<= n 1)
;            1
;            (* n fact(- n 1)) 
;        ) 
;    )
;)
;(fact 5)
